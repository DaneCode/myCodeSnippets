class BowlingGame:
  # An array to store the number of pins knocked down in each roll
  rolls = [0] * 21
  current_roll = 0

  def roll(self, no_of_pins):
    # Store the number of pins knocked down in the current roll
    self.rolls[self.current_roll] = no_of_pins
    self.current_roll += 1

  def score(self):
    score = 0
    frame_index = 0

    # Loop through all the frames
    for frame in range(10):
      # If it is the last frame
      if frame == 9:
        # If it is a strike
        if self.is_strike(frame_index):
          # Add the score for the strike and the next two rolls
          score += 10 + self.rolls[frame_index + 1] + self.rolls[frame_index + 2]
          frame_index += 1
        elif self.is_spare(frame_index):
          # If it is a spare, add the score for the spare and the next roll
          score += 10 + self.rolls[frame_index + 2]
          frame_index += 2
        else:
          # If it is an open frame, add the score for the frame
          score += self.rolls[frame_index] + self.rolls[frame_index + 1]
          frame_index += 2
      else:
        # If it is a strike
        if self.is_strike(frame_index):
          # Add the score for the strike
          score += 10 + self.rolls[frame_index + 1] + self.rolls[frame_index + 2]
          frame_index += 1
        elif self.is_spare(frame_index):
          # If it is a spare, add the score for the spare
          score += 10 + self.rolls[frame_index + 2]
          frame_index += 2
        else:
          # If it is an open frame, add the score for the frame
          score += self.rolls[frame_index] + self.rolls[frame_index + 1]
          frame_index += 2

    return score

  def is_spare(self, frame_index):
    # Check if it is a spare by checking if the sum of the rolls in the frame is 10
    return self.rolls[frame_index] + self.rolls[frame_index + 1] == 10

  def is_strike(self, frame_index):
    # Check if it is a strike by checking if the first roll in the frame is 10
    return self.rolls[frame_index] == 10

To use this class, you can create an instance of BowlingGame and call the roll and score methods as follows:

game = BowlingGame()
game.roll(4)
game.roll(6)
game.roll(5)
game.roll(0)
score = game.score()

In this example, the score will be 20, as explained in the problem statement.

Unit testing
here is an example of how you can write unit tests for the bowling game scoring system in Python using the PyTest testing framework:

import pytest

from bowling_game import BowlingGame

def test_roll():
  game = BowlingGame()
  game.roll(4)
  game.roll(6)

  assert game.current_roll == 2
  assert game.rolls[0] == 4
  assert game.rolls[1] == 6

def test_is_spare():
  game = BowlingGame()
  game.roll(4)
  game.roll(6)

  assert game.is_spare(0) == True

def test_is_not_spare():
  game = BowlingGame()
  game.roll(4)
  game.roll(4)

  assert game.is_spare(0) == False

def test_is_strike():
  game = BowlingGame()
  game.roll(10)

  assert game.is_strike(0) == True

def test_is_not_strike():
  game = BowlingGame()
  game.roll(4)

  assert game.is_strike(0) == False

def test_score():
  game = BowlingGame()
  game.roll(4)
  game.roll(6)
  game.roll(5)
  game.roll(0)

  assert game.score() == 20

The test_roll test case checks if the roll method stores the number of pins knocked down in the current roll in the rolls array and increments the current_roll variable.

The test_is_spare test case checks if the is_spare method returns True for a spare frame (i.e., a frame in which the sum of the rolls is 10).

The test_is_not_spare test case checks if the is_spare method returns False for a frame that is not a spare (i.e., a frame in which the sum of the rolls is not 10).

The test_is_strike test case checks if the is_strike method returns True for a strike frame (i.e., a frame in which the first roll is 10).

The test_is_not_strike test case checks if the is_strike method returns False for a frame that is not a strike (i.e., a frame in which the first roll is not 10).

The test_score test case checks if the score method returns the correct score for the game by rolling 4, 6, 5, and 0 in four consecutive frames. The expected score is 20.





JS version

class BowlingGame {
  // An array to store the number of pins knocked down in each roll
  rolls = [0] * 21
  currentRoll = 0

  roll(noOfPins) {
    // Store the number of pins knocked down in the current roll
    this.rolls[this.currentRoll] = noOfPins
    this.currentRoll += 1
  }

  score() {
    let score = 0
    let frameIndex = 0

    // Loop through all the frames
    for (let frame = 0; frame < 10; frame++) {
      // If it is the last frame
      if (frame == 9) {
        // If it is a strike
        if (this.isStrike(frameIndex)) {
          // Add the score for the strike and the next two rolls
          score += 10 + this.rolls[frameIndex + 1] + this.rolls[frameIndex + 2]
          frameIndex += 1
        } else if (this.isSpare(frameIndex)) {
          // If it is a spare, add the score for the spare and the next roll
          score += 10 + this.rolls[frameIndex + 2]
          frameIndex += 2
        } else {
          // If it is an open frame, add the score for the frame
          score += this.rolls[frameIndex] + this.rolls[frameIndex + 1]
          frameIndex += 2
        }
      } else {
        // If it is a strike
        if (this.isStrike(frameIndex)) {
          // Add the score for the strike
          score += 10 + this.rolls[frameIndex + 1] + this.rolls[frameIndex + 2]
          frameIndex += 1
        } else if (this.isSpare(frameIndex)) {
          // If it is a spare, add the score for the spare
          score += 10 + this.rolls[frameIndex + 2]
          frameIndex += 2
        } else {
          // If it is an open frame, add the score for the frame
          score += this.rolls[frameIndex] + this.rolls[frameIndex + 1]
          frameIndex += 2
        }
      }
    }

    return score
  }

  isSpare(frameIndex) {
    // Check if it is a spare by checking if the sum of the rolls in the frame is 10
    return this.rolls[frameIndex] + this.rolls[frameIndex + 1] == 10
  }

  isStrike(frameIndex) {
    // Check if it is a strike by checking if the first roll in the frame is 10
    return this.rolls[frameIndex] == 10
  }
}

To use this class, you can create an instance of BowlingGame and call the roll and score methods as follows:

const game = new BowlingGame()
game.roll(4)
game.roll(6)
game.roll(5)
game.roll(0)
const score = game.score()
In this example, the score will be 20, as explained in the problem statement.

Unit testing

here is an example of how you can write unit tests for the bowling game scoring system in JavaScript using the Jest testing framework:

const BowlingGame = require("./bowling-game");

describe("BowlingGame", () => {
  test("roll", () => {
    const game = new BowlingGame();
    game.roll(4);
    game.roll(6);

    expect(game.currentRoll).toBe(2);
    expect(game.rolls[0]).toBe(4);
    expect(game.rolls[1]).toBe(6);
  });

  test("isSpare", () => {
    const game = new BowlingGame();
    game.roll(4);
    game.roll(6);

    expect(game.isSpare(0)).toBe(true);
  });

  test("isNotSpare", () => {
    const game = new BowlingGame();
    game.roll(4);
    game.roll(4);

    expect(game.isSpare(0)).toBe(false);
  });

  test("isStrike", () => {
    const game = new BowlingGame();
    game.roll(10);

    expect(game.isStrike(0)).toBe(true);
  });

  test("isNotStrike", () => {
    const game = new BowlingGame();
    game.roll(4);

    expect(game.isStrike(0)).toBe(false);
  });

  test("score", () => {
    const game = new BowlingGame();
    game.roll(4);
    game.roll(6);
    game.roll(5);
    game.roll(0);

    expect(game.score()).toBe(20);
  });
});

The test("roll") test case checks if the roll method stores the number of pins knocked down in the current roll in the rolls array and increments the currentRoll variable.

The test("isSpare") test case checks if the isSpare method returns true for a spare frame (i.e., a frame in which the sum of the rolls is 10).

The test("isNotSpare") test case checks if the isSpare method returns false for a frame that is not a spare (i.e., a frame in which the sum of the rolls is not 10).

The test("isStrike") test case checks if the isStrike method returns true for a strike frame (i.e., a frame in which the first roll is 10).

The test("isNotStrike") test case checks if the isStrike method returns false for a frame that is not a strike (i.e., a frame in which the first roll is not 10).

The test("score") test case checks if the score method returns the correct score for the game by rolling 4, 6, 5, and 0 in four consecutive frames. The expected score is 20.
